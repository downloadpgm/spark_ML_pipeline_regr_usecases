
val df = spark.read.json("spark/imoveis/imoveis.json")

spark.conf.set("spark.sql.shuffle.partitions",6)

df.printSchema
root
 |-- ident: struct (nullable = true)
 |    |-- customerID: string (nullable = true)
 |    |-- source: string (nullable = true)
 |-- listing: struct (nullable = true)
 |    |-- address: struct (nullable = true)
 |    |    |-- city: string (nullable = true)
 |    |    |-- location: struct (nullable = true)
 |    |    |    |-- lat: double (nullable = true)
 |    |    |    |-- lon: double (nullable = true)
 |    |    |-- neighborhood: string (nullable = true)
 |    |    |-- zone: string (nullable = true)
 |    |-- features: struct (nullable = true)
 |    |    |-- bathrooms: long (nullable = true)
 |    |    |-- bedrooms: long (nullable = true)
 |    |    |-- floors: long (nullable = true)
 |    |    |-- parkingSpaces: long (nullable = true)
 |    |    |-- suites: long (nullable = true)
 |    |    |-- totalAreas: string (nullable = true)
 |    |    |-- unitFloor: long (nullable = true)
 |    |    |-- unitsOnTheFloor: long (nullable = true)
 |    |    |-- usableAreas: string (nullable = true)
 |    |-- prices: struct (nullable = true)
 |    |    |-- price: string (nullable = true)
 |    |    |-- tax: struct (nullable = true)
 |    |    |    |-- condo: string (nullable = true)
 |    |    |    |-- iptu: string (nullable = true)
 |    |-- types: struct (nullable = true)
 |    |    |-- unit: string (nullable = true)
 |    |    |-- usage: string (nullable = true)
 
df.show(10,false)
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
|ident                     |listing                                                                                                                                                          |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
|[775564-BOJSMVON, Website]|[[Rio de Janeiro, [-22.909429, -43.413557], Taquara, Zona Oeste], [0, 0, 0, 1, 0, 62, 0, 0, 62], [45000, [150, 0]], [Outros, Residencial]]                       |
|[660895-AUENKNYY, Website]|[[Rio de Janeiro, [-22.869698, -43.509141], Santíssimo, Zona Oeste], [1, 2, 0, 1, 0, 0, 0, 0, 44], [45000, [120, 0]], [Apartamento, Residencial]]                |
|[751522-JESYFEQL, Website]|[[Rio de Janeiro, [-22.986927, -43.646786], Pedra de Guaratiba, Zona Oeste], [0, 0, 0, 0, 0, 132, 0, 0, 132], [50000, [100, 0]], [Outros, Residencial]]          |
|[714052-GAAEWYKS, Website]|[[Rio de Janeiro, [-22.881977, -43.330818], Cascadura, Zona Norte], [1, 0, 0, 0, 0, 32, 3, 0, 32], [45000, [468, 346]], [Outros, Comercial]]                     |
|[568886-ZIBFOMCC, Website]|[[Rio de Janeiro, [-23.027653, -43.480742], Recreio dos Bandeirantes, Zona Oeste], [2, 3, 3, 1, 1, 0, 2, 4, 60], [50000, [400, 120]], [Apartamento, Residencial]]|
|[526755-OBLTYTEN, Website]|[[Rio de Janeiro, [-22.966059, -43.571183], Guaratiba, Zona Oeste], [0, 0, 0, 0, 0, 200, 0, 0, 200], [50000, [0,]], [Outros, Residencial]]                       |
|[593569-CJLMNFGW, Website]|[[Rio de Janeiro, [-22.939028, -43.3453], Freguesia (Jacarepaguá), Zona Oeste], [1, 0, 0, 0, 0, 25, 2, 0, 25], [50000, [801, 211]], [Outros, Comercial]]         |
|[989181-RYJOLMCU, Website]|[[Rio de Janeiro, [-22.841509, -43.278855], Penha, Zona Norte], [1, 0, 0, 0, 0, 23, 0, 0, 23], [50000, [230,]], [Outros, Comercial]]                             |
|[145372-EZKAKSWM, Website]|[[Rio de Janeiro, [-22.835609, -43.392253], Ricardo de Albuquerque, Zona Norte], [0, 0, 0, 0, 0, 60, 0, 0, 60], [45000, [,]], [Outros, Comercial]]               |
|[792086-NWNQTDYL, Website]|[[Rio de Janeiro, [-22.885306, -43.253044], Jacarezinho, Zona Norte], [1, 1, 0, 1, 0, 35, 0, 0, 33], [45336, [0, 0]], [Apartamento, Residencial]]                |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
only showing top 10 rows

df.select("listing.address.city","listing.address.zone","listing.features.*","listing.prices.price","listing.types.*").show(10)
+--------------+----------+---------+--------+------+-------------+------+----------+---------+---------------+-----------+-----+-----------+-----------+
|          city|      zone|bathrooms|bedrooms|floors|parkingSpaces|suites|totalAreas|unitFloor|unitsOnTheFloor|usableAreas|price|       unit|      usage|
+--------------+----------+---------+--------+------+-------------+------+----------+---------+---------------+-----------+-----+-----------+-----------+
|Rio de Janeiro|Zona Oeste|        0|       0|     0|            1|     0|        62|        0|              0|         62|45000|     Outros|Residencial|
|Rio de Janeiro|Zona Oeste|        1|       2|     0|            1|     0|         0|        0|              0|         44|45000|Apartamento|Residencial|
|Rio de Janeiro|Zona Oeste|        0|       0|     0|            0|     0|       132|        0|              0|        132|50000|     Outros|Residencial|
|Rio de Janeiro|Zona Norte|        1|       0|     0|            0|     0|        32|        3|              0|         32|45000|     Outros|  Comercial|
|Rio de Janeiro|Zona Oeste|        2|       3|     3|            1|     1|         0|        2|              4|         60|50000|Apartamento|Residencial|
|Rio de Janeiro|Zona Oeste|        0|       0|     0|            0|     0|       200|        0|              0|        200|50000|     Outros|Residencial|
|Rio de Janeiro|Zona Oeste|        1|       0|     0|            0|     0|        25|        2|              0|         25|50000|     Outros|  Comercial|
|Rio de Janeiro|Zona Norte|        1|       0|     0|            0|     0|        23|        0|              0|         23|50000|     Outros|  Comercial|
|Rio de Janeiro|Zona Norte|        0|       0|     0|            0|     0|        60|        0|              0|         60|45000|     Outros|  Comercial|
|Rio de Janeiro|Zona Norte|        1|       1|     0|            1|     0|        35|        0|              0|         33|45336|Apartamento|Residencial|
+--------------+----------+---------+--------+------+-------------+------+----------+---------+---------------+-----------+-----+-----------+-----------+
only showing top 10 rows

val df1 = df.select("listing.address.city","listing.address.zone","listing.features.*","listing.prices.price","listing.types.*")

df1.printSchema
root
 |-- city: string (nullable = true)
 |-- zone: string (nullable = true)
 |-- bathrooms: long (nullable = true)
 |-- bedrooms: long (nullable = true)
 |-- floors: long (nullable = true)
 |-- parkingSpaces: long (nullable = true)
 |-- suites: long (nullable = true)
 |-- totalAreas: string (nullable = true)
 |-- unitFloor: long (nullable = true)
 |-- unitsOnTheFloor: long (nullable = true)
 |-- usableAreas: string (nullable = true)
 |-- price: string (nullable = true)
 |-- unit: string (nullable = true)
 |-- usage: string (nullable = true)
 
df1.groupBy("city","zone").count.orderBy("city","zone").show
+------------------+------------+-----+
|              city|        zone|count|
+------------------+------------+-----+
|Armação dos Búzios|            |    1|
|      Cachoeirinha|            |    1|
|         Queimados|            |    3|
|    Rio de Janeiro|            |  157|
|    Rio de Janeiro|Zona Central| 1921|
|    Rio de Janeiro|  Zona Norte|15191|
|    Rio de Janeiro|  Zona Oeste|37116|
|    Rio de Janeiro|    Zona Sul|19222|
|       São Gonçalo|            |    2|
|São João de Meriti|            |    1|
+------------------+------------+-----+

df1.groupBy("unit","usage").count.orderBy("unit","usage").show
+-----------+-----------+-----+
|       unit|      usage|count|
+-----------+-----------+-----+
|Apartamento|Residencial|59106|
|       Casa|  Comercial|   89|
|       Casa|Residencial| 9300|
|     Outros|  Comercial| 3930|
|     Outros|Residencial| 1190|
+-----------+-----------+-----+


import org.apache.spark.sql.types._

val df2 = df1.where('city === "Rio de Janeiro").withColumn("label", 'price.cast(DoubleType)).withColumn("usableAreas", 'usableAreas.cast(DoubleType))

df2.printSchema
root
 |-- city: string (nullable = true)
 |-- zone: string (nullable = true)
 |-- bathrooms: long (nullable = true)
 |-- bedrooms: long (nullable = true)
 |-- floors: long (nullable = true)
 |-- parkingSpaces: long (nullable = true)
 |-- suites: long (nullable = true)
 |-- totalAreas: string (nullable = true)
 |-- unitFloor: long (nullable = true)
 |-- unitsOnTheFloor: long (nullable = true)
 |-- usableAreas: double (nullable = true)
 |-- price: string (nullable = true)
 |-- unit: string (nullable = true)
 |-- usage: string (nullable = true)
 |-- label: double (nullable = true)
 
df2.describe().show
+-------+--------------+--------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-----------+-----------+------------------+
|summary|          city|    zone|         bathrooms|          bedrooms|            floors|     parkingSpaces|            suites|        totalAreas|         unitFloor|   unitsOnTheFloor|       usableAreas|             price|       unit|      usage|             label|
+-------+--------------+--------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-----------+-----------+------------------+
|  count|         73607|   73607|             73607|             73607|             73607|             73607|             73607|             73607|             73607|             73607|             73607|             73607|      73607|      73607|             73607|
|   mean|          null|    null|2.3723830613936174|2.5739128072058364|1.9321531919518524|1.4089013273194126|1.0746668115804203|1688.8303014658932|1.4936758732185798|1.2206447756327523|141.53970410422923| 1210756.481095548|       null|       null| 1210756.481095548|
| stddev|          null|    null|1.5336128330520953|1.2810480003465383|4.5291628898620795|1.7274123968255584| 1.177352606905103|173402.82602165386|13.118027293968664|3.4139172865327154|146.72952223609585|1384781.5939764515|       null|       null|1384781.5939764515|
|    min|Rio de Janeiro|        |                 0|                 0|                 0|                 0|                 0|                 0|                 0|                 0|               0.0|            100000|Apartamento|  Comercial|           45000.0|
|    max|Rio de Janeiro|Zona Sul|                49|                50|                50|               180|                50|               999|              1234|                76|            1917.0|           9999999|     Outros|Residencial|             1.0E7|
+-------+--------------+--------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-----------+-----------+------------------+


import org.apache.spark.ml.feature.{StringIndexer, OneHotEncoder, VectorAssembler}

val stridx1 = new StringIndexer().setInputCol("unit").setOutputCol("unitIdx")
val stridx2 = new StringIndexer().setInputCol("usage").setOutputCol("usageIdx")
val stridx3 = new StringIndexer().setInputCol("zone").setOutputCol("zoneIdx")

val va = new VectorAssembler().setOutputCol("features").setInputCols(Array("zoneIdx","bathrooms","bedrooms","floors","parkingSpaces","suites","unitFloor","unitsOnTheFloor","usableAreas","unitIdx","usageIdx"))

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(stridx1,stridx2,stridx3,va))

val df3 = pipeline.fit(df2).transform(df2)

df3.printSchema
root
 |-- city: string (nullable = true)
 |-- zone: string (nullable = true)
 |-- bathrooms: long (nullable = true)
 |-- bedrooms: long (nullable = true)
 |-- floors: long (nullable = true)
 |-- parkingSpaces: long (nullable = true)
 |-- suites: long (nullable = true)
 |-- totalAreas: string (nullable = true)
 |-- unitFloor: long (nullable = true)
 |-- unitsOnTheFloor: long (nullable = true)
 |-- usableAreas: double (nullable = true)
 |-- price: string (nullable = true)
 |-- unit: string (nullable = true)
 |-- usage: string (nullable = true)
 |-- label: double (nullable = true)
 |-- unitIdx: double (nullable = false)
 |-- usageIdx: double (nullable = false)
 |-- zoneIdx: double (nullable = false)
 |-- features: vector (nullable = true)

 
df3.select("label","features").show(10,false)
+-------+----------------------------------------------+
|label  |features                                      |
+-------+----------------------------------------------+
|45000.0|(11,[4,8,9],[1.0,62.0,2.0])                   |
|45000.0|(11,[1,2,4,8],[1.0,2.0,1.0,44.0])             |
|50000.0|(11,[8,9],[132.0,2.0])                        |
|45000.0|(11,[0,1,6,8,9,10],[2.0,1.0,3.0,32.0,2.0,1.0])|
|50000.0|[0.0,2.0,3.0,3.0,1.0,1.0,2.0,4.0,60.0,0.0,0.0]|
|50000.0|(11,[8,9],[200.0,2.0])                        |
|50000.0|(11,[1,6,8,9,10],[1.0,2.0,25.0,2.0,1.0])      |
|50000.0|(11,[0,1,8,9,10],[2.0,1.0,23.0,2.0,1.0])      |
|45000.0|(11,[0,8,9,10],[2.0,60.0,2.0,1.0])            |
|45336.0|(11,[0,1,2,4,8],[2.0,1.0,1.0,1.0,33.0])       |
+-------+----------------------------------------------+
only showing top 10 rows

// ----- building the decision tree model

import org.apache.spark.ml.regression.DecisionTreeRegressor
val dt = new DecisionTreeRegressor
dt.setFeaturesCol("features")

import org.apache.spark.ml.Pipeline

val pipeline = new Pipeline().setStages(Array(stridx1,stridx2,stridx3,va,dt))

val Array(trainingData, testData) = df2.randomSplit(Array(0.7,0.3),11L)

trainingData.cache
testData.cache

// ----- find best decision tree model

import org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}

val paramGrid = new ParamGridBuilder().
addGrid(dt.maxDepth, Array(7, 10, 20)).
addGrid(dt.maxBins, Array(16, 32, 48)).build()

import org.apache.spark.ml.evaluation.RegressionEvaluator

val cv = new CrossValidator().
setEstimator(pipeline).
setEvaluator(new RegressionEvaluator).
setEstimatorParamMaps(paramGrid).
setNumFolds(3)

val model = cv.fit(trainingData)

import org.apache.spark.ml.PipelineModel
val bestmodel = model.bestModel.asInstanceOf[PipelineModel]

import org.apache.spark.ml.regression.DecisionTreeRegressionModel
val dtmodel = bestmodel.stages(4).asInstanceOf[DecisionTreeRegressionModel]

// -----  metrics extracted from model

dtmodel.getMaxDepth
res9: Int = 7

dtmodel.getMaxBins
res10: Int = 32

val pred = bestmodel.transform(trainingData)

val bceval = new RegressionEvaluator()

bceval.setMetricName("rmse").evaluate(pred)
res11: Double = 699716.8669432728

bceval.setMetricName("r2").evaluate(pred)
res12: Double = 0.7451263831536338

dtmodel.toDebugString
res8: String =
"DecisionTreeRegressionModel (uid=dtr_69a4a3b9c170) of depth 7 with 249 nodes
  If (feature 8 <= 193.5)
   If (feature 8 <= 96.5)
    If (feature 0 in {0.0,2.0,3.0,4.0})
     If (feature 8 <= 65.5)
      If (feature 5 <= 0.5)
       If (feature 1 <= 0.5)
        If (feature 10 in {1.0})
         Predict: 256076.63829787233
        Else (feature 10 not in {1.0})
         Predict: 1275433.3076923077
       Else (feature 1 > 0.5)
        If (feature 8 <= 50.5)
         Predict: 230705.30048205677
        Else (feature 8 > 50.5)
         Predict: 293248.5455855856
      Else (feature 5 > 0.5)
       If (feature 2 <= 3.5)
        If (feature 1 <= 3.5)
         Predict: 377555.1539602492
        Else (feature 1 > 3.5)
         Predict: 1032195.7142857143
       Else (feature 2 ...

// -----  metrics on test data

val pred = bestmodel.transform(testData)

val bceval = new RegressionEvaluator()

bceval.setMetricName("rmse").evaluate(pred)
res11: Double = 717085.9989395953

bceval.setMetricName("r2").evaluate(pred)
res12: Double = 0.7307271827313657

