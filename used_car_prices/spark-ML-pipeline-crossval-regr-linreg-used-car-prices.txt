
val df = spark.read.format("csv").option("inferSchema","true").load("used_cars/used_cars_price_train-data.csv").toDF("Row","Name","Location","Year","Kilometers_Driven","Fuel_Type","Transmission","Owner_Type","Mileage","Engine","Power","Seats","New_Price","Price")

df.printSchema
root
 |-- Row: integer (nullable = true)
 |-- Name: string (nullable = true)
 |-- Location: string (nullable = true)
 |-- Year: integer (nullable = true)
 |-- Kilometers_Driven: integer (nullable = true)
 |-- Fuel_Type: string (nullable = true)
 |-- Transmission: string (nullable = true)
 |-- Owner_Type: string (nullable = true)
 |-- Mileage: string (nullable = true)
 |-- Engine: string (nullable = true)
 |-- Power: string (nullable = true)
 |-- Seats: double (nullable = true)
 |-- New_Price: string (nullable = true)
 |-- Price: double (nullable = true)

df.describe().show
+-------+------------------+--------------------+---------+------------------+-----------------+---------+------------+----------+--------+-------+--------+------------------+----------+------------------+
|summary|               Row|                Name| Location|              Year|Kilometers_Driven|Fuel_Type|Transmission|Owner_Type| Mileage| Engine|   Power|             Seats| New_Price|             Price|
+-------+------------------+--------------------+---------+------------------+-----------------+---------+------------+----------+--------+-------+--------+------------------+----------+------------------+
|  count|              6019|                6019|     6019|              6019|             6019|     6019|        6019|      6019|    6017|   5983|    5983|              5977|       824|              6019|
|   mean|            3009.0|                null|     null|2013.3581990363848|58738.38029573019|     null|        null|      null|    null|   null|    null| 5.278735151413753|      null| 9.479468350224273|
| stddev|1737.6799666988932|                null|     null|  3.26974211609139|91268.84320624865|     null|        null|      null|    null|   null|    null|0.8088395547482933|      null|11.187917112455484|
|    min|                 0|Ambassador Classi...|Ahmedabad|              1998|              171|      CNG|   Automatic|     First|0.0 kmpl|1047 CC| 100 bhp|               0.0|      1 Cr|              0.44|
|    max|              6018|Volvo XC90 2007-2...|     Pune|              2019|          6500000|   Petrol|      Manual|     Third|9.9 kmpl| 999 CC|null bhp|              10.0|99.92 Lakh|             160.0|
+-------+------------------+--------------------+---------+------------------+-----------------+---------+------------+----------+--------+-------+--------+------------------+----------+------------------+

df.groupBy("Mileage").count.orderBy('count.desc).show(3)
+---------+-----+
|  Mileage|count|
+---------+-----+
|17.0 kmpl|  172|
|18.9 kmpl|  172|
|18.6 kmpl|  119|
+---------+-----+
only showing top 3 rows

df.groupBy("Engine").count.orderBy('count.desc).show(3)
+-------+-----+
| Engine|count|
+-------+-----+
|1197 CC|  606|
|1248 CC|  512|
|1498 CC|  304|
+-------+-----+
only showing top 3 rows

df.groupBy("Power").count.orderBy('count.desc).show(3)
+--------+-----+
|   Power|count|
+--------+-----+
|  74 bhp|  235|
|98.6 bhp|  131|
|73.9 bhp|  125|
+--------+-----+
only showing top 3 rows

df.groupBy("Seats").count.orderBy('count.desc).show(3)
+-----+-----+
|Seats|count|
+-----+-----+
|  5.0| 5014|
|  7.0|  674|
|  8.0|  134|
+-----+-----+
only showing top 3 rows


val df1 = df.na.fill(Map("Mileage" -> "18.9 kmpl", "Engine" -> "1197 CC", "Power" -> "74 bhp", "Seats" -> 5.0)).na.replace("Power", Map("null bhp" -> "74 bhp"))

import org.apache.spark.sql.types._

val df2 = df1.withColumn("age", (lit(2021)-'Year).cast(DoubleType)).
withColumn("mileage_aux", regexp_extract('Mileage,"([0-9]+.?[0-9]*)",1).cast(DoubleType)).
withColumn("engine_aux", regexp_extract('Engine,"([0-9]+.?[0-9]*)",1).cast(DoubleType)).
withColumn("power_aux", regexp_extract('Power,"([0-9]+.?[0-9]*)",1).cast(DoubleType)).
withColumnRenamed("Price", "label").
drop("Row")

df2.printSchema
root
 |-- Name: string (nullable = true)
 |-- Location: string (nullable = true)
 |-- Year: integer (nullable = true)
 |-- Kilometers_Driven: integer (nullable = true)
 |-- Fuel_Type: string (nullable = true)
 |-- Transmission: string (nullable = true)
 |-- Owner_Type: string (nullable = true)
 |-- Mileage: string (nullable = false)
 |-- Engine: string (nullable = false)
 |-- Power: string (nullable = false)
 |-- Seats: double (nullable = false)
 |-- New_Price: string (nullable = true)
 |-- label: double (nullable = true)
 |-- age: double (nullable = true)
 |-- mileage_aux: double (nullable = true)
 |-- engine_aux: double (nullable = true)
 |-- power_aux: double (nullable = true)

df2.describe().show
+-------+--------------------+---------+------------------+-----------------+---------+------------+----------+--------+-------+--------+------------------+----------+------------------+------------------+------------------+------------------+-----------------+
|summary|                Name| Location|              Year|Kilometers_Driven|Fuel_Type|Transmission|Owner_Type| Mileage| Engine|   Power|             Seats| New_Price|             label|               age|       mileage_aux|        engine_aux|        power_aux|
+-------+--------------------+---------+------------------+-----------------+---------+------------+----------+--------+-------+--------+------------------+----------+------------------+------------------+------------------+------------------+-----------------+
|  count|                6019|     6019|              6019|             6019|     6019|        6019|      6019|    6019|   6019|    6019|              6019|       824|              6019|              6019|              6019|              6019|             6019|
|   mean|                null|     null|2013.3581990363848|58738.38029573019|     null|        null|      null|    null|   null|    null|5.2767901644791495|      null| 9.479468350224273| 7.641800963615219|18.135215152018656|1618.7388270476824|112.3204718391751|
| stddev|                null|     null|  3.26974211609139|91268.84320624865|     null|        null|      null|    null|   null|    null|0.8063460892297473|      null|11.187917112455484|3.2697421160913938| 4.581548857057788| 600.4458584135865|53.56569974837497|
|    min|Ambassador Classi...|Ahmedabad|              1998|              171|      CNG|   Automatic|     First|0.0 kmpl|1047 CC| 100 bhp|               0.0|      1 Cr|              0.44|               2.0|               0.0|              72.0|             34.2|
|    max|Volvo XC90 2007-2...|     Pune|              2019|          6500000|   Petrol|      Manual|     Third|9.9 kmpl| 999 CC|99.6 bhp|              10.0|99.92 Lakh|             160.0|              23.0|             33.54|            5998.0|            560.0|
+-------+--------------------+---------+------------------+-----------------+---------+------------+----------+--------+-------+--------+------------------+----------+------------------+------------------+------------------+------------------+-----------------+

df2.groupBy("Location").count.show
+----------+-----+
|  Location|count|
+----------+-----+
| Bangalore|  358|
|     Kochi|  651|
|   Chennai|  494|
|    Mumbai|  790|
| Ahmedabad|  224|
|   Kolkata|  535|
|      Pune|  622|
|     Delhi|  554|
|Coimbatore|  636|
| Hyderabad|  742|
|    Jaipur|  413|
+----------+-----+

df2.groupBy("Fuel_Type").count.show
+---------+-----+
|Fuel_Type|count|
+---------+-----+
|   Diesel| 3205|
|      CNG|   56|
| Electric|    2|
|      LPG|   10|
|   Petrol| 2746|
+---------+-----+

df2.groupBy("Transmission").count.show
+------------+-----+
|Transmission|count|
+------------+-----+
|   Automatic| 1720|
|      Manual| 4299|
+------------+-----+

df2.groupBy("Owner_Type").count.show
+--------------+-----+
|    Owner_Type|count|
+--------------+-----+
|         First| 4929|
|        Second|  968|
|Fourth & Above|    9|
|         Third|  113|
+--------------+-----+


import org.apache.spark.ml.feature.{StringIndexer, OneHotEncoder, VectorAssembler}

val dfInd1 = new StringIndexer().setInputCol("Location").setOutputCol("LocationCat").setHandleInvalid("skip")
val dfInd2 = new StringIndexer().setInputCol("Fuel_Type").setOutputCol("Fuel_TypeCat").setHandleInvalid("skip")
val dfInd3 = new StringIndexer().setInputCol("Transmission").setOutputCol("TransmissionCat").setHandleInvalid("skip")
val dfInd4 = new StringIndexer().setInputCol("Owner_Type").setOutputCol("Owner_TypeCat").setHandleInvalid("skip")

val dfOne1 = new OneHotEncoder().setInputCol("LocationCat").setOutputCol("LocationVect")
val dfOne2 = new OneHotEncoder().setInputCol("Fuel_TypeCat").setOutputCol("Fuel_TypeVect")
val dfOne3 = new OneHotEncoder().setInputCol("TransmissionCat").setOutputCol("TransmissionVect")
val dfOne4 = new OneHotEncoder().setInputCol("Owner_TypeCat").setOutputCol("Owner_TypeVect")

val va = new VectorAssembler().setOutputCol("features").setInputCols(Array("Kilometers_Driven","Seats","age","mileage_aux","engine_aux","power_aux", "Fuel_TypeVect","TransmissionVect","Owner_TypeVect","LocationVect"))

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(dfInd1,dfInd2,dfInd3,dfInd4,dfOne1,dfOne2,dfOne3,dfOne4,va))

val df3 = pipeline.fit(df2).transform(df2)

df3.printSchema
root
 |-- Name: string (nullable = true)
 |-- Location: string (nullable = true)
 |-- Year: integer (nullable = true)
 |-- Kilometers_Driven: integer (nullable = true)
 |-- Fuel_Type: string (nullable = true)
 |-- Transmission: string (nullable = true)
 |-- Owner_Type: string (nullable = true)
 |-- Mileage: string (nullable = false)
 |-- Engine: string (nullable = false)
 |-- Power: string (nullable = false)
 |-- Seats: double (nullable = false)
 |-- New_Price: string (nullable = true)
 |-- label: double (nullable = true)
 |-- age: double (nullable = true)
 |-- mileage_aux: double (nullable = true)
 |-- engine_aux: double (nullable = true)
 |-- power_aux: double (nullable = true)
 |-- LocationCat: double (nullable = false)
 |-- Fuel_TypeCat: double (nullable = false)
 |-- TransmissionCat: double (nullable = false)
 |-- Owner_TypeCat: double (nullable = false)
 |-- LocationVect: vector (nullable = true)
 |-- Fuel_TypeVect: vector (nullable = true)
 |-- TransmissionVect: vector (nullable = true)
 |-- Owner_TypeVect: vector (nullable = true)
 |-- features: vector (nullable = true)
 
df3.show(10)
+--------------------+----------+----+-----------------+---------+------------+----------+----------+-------+---------+-----+---------+-----+----+-----------+----------+---------+-----------+------------+---------------+-------------+--------------+-------------+----------------+--------------+--------------------+
|                Name|  Location|Year|Kilometers_Driven|Fuel_Type|Transmission|Owner_Type|   Mileage| Engine|    Power|Seats|New_Price|label| age|mileage_aux|engine_aux|power_aux|LocationCat|Fuel_TypeCat|TransmissionCat|Owner_TypeCat|  LocationVect|Fuel_TypeVect|TransmissionVect|Owner_TypeVect|            features|
+--------------------+----------+----+-----------------+---------+------------+----------+----------+-------+---------+-----+---------+-----+----+-----------+----------+---------+-----------+------------+---------------+-------------+--------------+-------------+----------------+--------------+--------------------+
|Maruti Wagon R LX...|    Mumbai|2010|            72000|      CNG|      Manual|     First|26.6 km/kg| 998 CC|58.16 bhp|  5.0|     null| 1.75|11.0|       26.6|     998.0|    58.16|        0.0|         2.0|            0.0|          0.0|(10,[0],[1.0])|(4,[2],[1.0])|   (1,[0],[1.0])| (3,[0],[1.0])|(24,[0,1,2,3,4,5,...|
|Hyundai Creta 1.6...|      Pune|2015|            41000|   Diesel|      Manual|     First|19.67 kmpl|1582 CC|126.2 bhp|  5.0|     null| 12.5| 6.0|      19.67|    1582.0|    126.2|        4.0|         0.0|            0.0|          0.0|(10,[4],[1.0])|(4,[0],[1.0])|   (1,[0],[1.0])| (3,[0],[1.0])|(24,[0,1,2,3,4,5,...|
|        Honda Jazz V|   Chennai|2011|            46000|   Petrol|      Manual|     First| 18.2 kmpl|1199 CC| 88.7 bhp|  5.0|8.61 Lakh|  4.5|10.0|       18.2|    1199.0|     88.7|        7.0|         1.0|            0.0|          0.0|(10,[7],[1.0])|(4,[1],[1.0])|   (1,[0],[1.0])| (3,[0],[1.0])|(24,[0,1,2,3,4,5,...|
|   Maruti Ertiga VDI|   Chennai|2012|            87000|   Diesel|      Manual|     First|20.77 kmpl|1248 CC|88.76 bhp|  7.0|     null|  6.0| 9.0|      20.77|    1248.0|    88.76|        7.0|         0.0|            0.0|          0.0|(10,[7],[1.0])|(4,[0],[1.0])|   (1,[0],[1.0])| (3,[0],[1.0])|(24,[0,1,2,3,4,5,...|
|Audi A4 New 2.0 T...|Coimbatore|2013|            40670|   Diesel|   Automatic|    Second| 15.2 kmpl|1968 CC|140.8 bhp|  5.0|     null|17.74| 8.0|       15.2|    1968.0|    140.8|        3.0|         0.0|            1.0|          1.0|(10,[3],[1.0])|(4,[0],[1.0])|       (1,[],[])| (3,[1],[1.0])|(24,[0,1,2,3,4,5,...|
|Hyundai EON LPG E...| Hyderabad|2012|            75000|      LPG|      Manual|     First|21.1 km/kg| 814 CC| 55.2 bhp|  5.0|     null| 2.35| 9.0|       21.1|     814.0|     55.2|        1.0|         3.0|            0.0|          0.0|(10,[1],[1.0])|(4,[3],[1.0])|   (1,[0],[1.0])| (3,[0],[1.0])|(24,[0,1,2,3,4,5,...|
|Nissan Micra Dies...|    Jaipur|2013|            86999|   Diesel|      Manual|     First|23.08 kmpl|1461 CC| 63.1 bhp|  5.0|     null|  3.5| 8.0|      23.08|    1461.0|     63.1|        8.0|         0.0|            0.0|          0.0|(10,[8],[1.0])|(4,[0],[1.0])|   (1,[0],[1.0])| (3,[0],[1.0])|(24,[0,1,2,3,4,5,...|
|Toyota Innova Cry...|    Mumbai|2016|            36000|   Diesel|   Automatic|     First|11.36 kmpl|2755 CC|171.5 bhp|  8.0|  21 Lakh| 17.5| 5.0|      11.36|    2755.0|    171.5|        0.0|         0.0|            1.0|          0.0|(10,[0],[1.0])|(4,[0],[1.0])|       (1,[],[])| (3,[0],[1.0])|(24,[0,1,2,3,4,5,...|
|Volkswagen Vento ...|      Pune|2013|            64430|   Diesel|      Manual|     First|20.54 kmpl|1598 CC|103.6 bhp|  5.0|     null|  5.2| 8.0|      20.54|    1598.0|    103.6|        4.0|         0.0|            0.0|          0.0|(10,[4],[1.0])|(4,[0],[1.0])|   (1,[0],[1.0])| (3,[0],[1.0])|(24,[0,1,2,3,4,5,...|
|Tata Indica Vista...|   Chennai|2012|            65932|   Diesel|      Manual|    Second| 22.3 kmpl|1248 CC|   74 bhp|  5.0|     null| 1.95| 9.0|       22.3|    1248.0|     74.0|        7.0|         0.0|            0.0|          1.0|(10,[7],[1.0])|(4,[0],[1.0])|   (1,[0],[1.0])| (3,[1],[1.0])|(24,[0,1,2,3,4,5,...|
+--------------------+----------+----+-----------------+---------+------------+----------+----------+-------+---------+-----+---------+-----+----+-----------+----------+---------+-----------+------------+---------------+-------------+--------------+-------------+----------------+--------------+--------------------+
only showing top 10 rows


// calculate pearson correlation to check multicolinearity

import org.apache.spark.ml.stat.Correlation
import org.apache.spark.ml.linalg.Matrix
import org.apache.spark.sql.Row

val corr = Correlation.corr(df3, "features", "pearson").head match {
   case Row(coeff: Matrix) => coeff
}
corr: org.apache.spark.ml.linalg.Matrix =
1.0                     0.08278191382013933     ... (24 total)
0.08278191382013933     1.0                     ...
0.17304756550241057     -0.015204175743670301   ...
-0.06525999805346726    -0.2996488878799701     ...
0.09047629292524847     0.39384940592837275     ...
0.029931845279779875    0.10553944723207119     ...
0.10444062567765386     0.3088693544374279      ...
-0.10390700831002093    -0.3024459613205942     ...
-0.0034960534996780184  -0.02897543491439956    ...
5.488416112342404E-4    -0.014004388421887918   ...
0.025662719689849522    0.07483760317991017     ...
-0.07856253816327335    -0.0023001765334279053  ...
0.06214325811871832     -0.006132291390566511   ...
0.0454052049244803      0.011724611447432918    ...
-0.0576902777616...


corr.toDense.rowIter.foreach( x => println(x.toString))

[1.0,0.08278191382013933,0.17304756550241057,-0.06525999805346726,0.09047629292524847,0.029931845279779875,0.10444062567765386,-0.10390700831002093,-0.0034960534996780184,5.488416112342404E-4,0.025662719689849522,-0.07856253816327335,0.06214325811871832,0.0454052049244803,-0.057690277761636356,0.049149203125117294,-0.05301211241476521,-0.044128002541469896,0.0439567703643684,-0.004960227934067791,-0.051901577087191564,0.10234363855084291,0.03838263316259876,-7.928070424792312E-4]
[0.08278191382013933,1.0,-0.015204175743670301,-0.2996488878799701,0.39384940592837275,0.10553944723207119,0.3088693544374279,-0.3024459613205942,-0.02897543491439956,-0.014004388421887918,0.07483760317991017,-0.0023001765334279053,-0.006132291390566511,0.011724611447432918,-0.002846241074230112,0.017312885954750695,-0.0286553056327543,0.010699077582801593,-0.004849169748145618,0.036108945334263204,-0.04350495235395795,0.013712616172825258,-0.011667674079174347,0.015602736665106537]
[0.17304756550241057,-0.015204175743670301,1.0,-0.32153451790440046,0.04628815842126016,-0.03969942159341252,-0.12618508885718527,0.12748978368183983,-0.01902324285831683,0.031919480001799574,0.09705857764912486,-0.37349380753231487,0.29791256290997875,0.23118362175690813,0.007219962823030489,0.07787017984670773,-0.22854089355384072,-0.21459448461392902,0.1126486840989277,0.0027144612523195295,0.028684095226638652,0.131993405406529,0.07275335591466643,0.042805608780509805]
[-0.06525999805346726,-0.2996488878799701,-0.32153451790440046,1.0,-0.5813622199257179,-0.48200992409432686,0.11304667678703761,-0.14395948525696858,0.15405825570152423,0.011129045317724778,0.3330069542711685,0.1514953426003889,-0.12254568796655135,-0.0841654079558968,-0.06597100580924475,0.028433317451474878,0.03848525456400911,-0.024694936885413455,-0.014679517961457037,-0.016053850990729247,0.068820202284532,-0.0076232821354340705,0.05103289153797026,-0.07742504818692611]
[0.09047629292524847,0.39384940592837275,0.04628815842126016,-0.5813622199257179,1.0,0.8604010510537129,0.42874310757483725,-0.40902458362489114,-0.08517238227092588,-0.0401788516332609,-0.4989348890084581,-0.04680603410275925,0.04070367733805115,0.017940514680346256,0.031182373021696727,0.008198158952193937,-0.022296626312057432,0.05630263215712669,-0.043606117385336374,0.04538729851666979,-0.07504379419186769,0.0011866325195637405,-0.0752471388896022,0.07942506035773907]
[0.029931845279779875,0.10553944723207119,-0.03969942159341252,-0.48200992409432686,0.8604010510537129,1.0,0.2930607955719803,-0.2731116639437388,-0.08562668605411192,-0.03991396120623494,-0.6415449770529975,-0.01985456934130631,0.02370695020049746,-0.004922840248337888,0.05957697047636998,-0.029933358197436144,0.013483221315966182,0.08095485533244098,-0.06158780099420371,0.041838899903988834,-0.06587146061270517,-0.029345644268499043,-0.09659958963019777,0.08705504524904685]
[0.10444062567765386,0.3088693544374279,-0.12618508885718527,0.11304667678703761,0.42874310757483725,0.2930607955719803,1.0,-0.977528063329319,-0.10342215412248205,-0.043536234969281364,-0.14161315614446227,0.03925970874381655,-0.025779135825352108,-0.04212501514360986,-0.10616419877179298,0.11232652133704574,-0.04572119020156211,0.018785256256795575,-0.04725952500130957,0.012677117611938123,-0.03378901881691957,0.03148717764442516,0.013284549378994549,0.03994385415450512]
[-0.10390700831002093,-0.3024459613205942,0.12748978368183983,-0.14395948525696858,-0.40902458362489114,-0.2731116639437388,-0.977528063329319,1.0,-0.08876441038424183,-0.037365961482695595,0.12898833962909434,-0.038733912346908976,0.024857804795087958,0.04287793418984337,0.09639615476919611,-0.113147632863956,0.04510746936820448,-0.011021304554050978,0.039700618250265,-0.01701585768652595,0.040932213735057586,-0.028405209528430984,-0.00979003292797672,-0.03430913784214987]
[-0.0034960534996780184,-0.02897543491439956,-0.01902324285831683,0.15405825570152423,-0.08517238227092588,-0.08562668605411192,-0.10342215412248205,-0.08876441038424183,1.0,-0.0039533066848600265,0.06129740789245412,-0.0038591126486684393,0.004681592703858113,-6.545549600669193E-4,0.049453809884387974,-0.02054724178659155,0.010827150997467241,-0.03331025648705988,0.04100548810102117,0.029006844565769917,-0.030268421759150753,-0.01636785564491817,-0.026303290894030145,-0.02437005698524339]
[5.488416112342404E-4,-0.014004388421887918,0.031919480001799574,0.011129045317724778,-0.0401788516332609,-0.03991396120623494,-0.043536234969281364,-0.037365961482695595,-0.0039533066848600265,1.0,0.025803546403155495,-0.002002850356165215,0.004350271237231057,-0.00564275765262771,-0.0037754161302123077,0.05915541319819142,-0.014206370561454495,-0.0140221712225236,-4.4753144333420396E-4,-0.012988490983473319,-0.012741690917548168,-0.012198213525893955,0.021201372968918174,-0.01025873553037604]
[0.025662719689849522,0.07483760317991017,0.09705857764912486,0.3330069542711685,-0.4989348890084581,-0.6415449770529975,-0.14161315614446227,0.12898833962909434,0.06129740789245412,0.025803546403155495,1.0,-4.586775537250117E-4,-0.00839131262904752,0.01975523560911632,-0.08412827380625157,0.01793725032458014,-0.022460857183010812,-0.07806438311058082,0.040766096599064786,-0.01614058206665801,0.0941833805669974,0.028359062277911427,0.09603902527338085,-0.06483300574647058]
[-0.07856253816327335,-0.0023001765334279053,-0.37349380753231487,0.1514953426003889,-0.04680603410275925,-0.01985456934130631,0.03925970874381655,-0.038733912346908976,-0.0038591126486684393,-0.002002850356165215,-4.586775537250117E-4,1.0,-0.9309259883027564,-0.2941430968561444,0.007747144257884008,0.066102535894705,0.1123669966096905,0.07041752026334143,-0.12523223220778373,0.004963138167993373,0.09836701073849302,-0.10930410844563718,-0.06520639249836198,-0.11340048451145428]
[0.06214325811871832,-0.006132291390566511,0.29791256290997875,-0.12254568796655135,0.04070367733805115,0.02370695020049746,-0.025779135825352108,0.024857804795087958,0.004681592703858113,0.004350271237231057,-0.00839131262904752,-0.9309259883027564,1.0,-0.06055381292881544,-0.008104059788975443,-0.048603097382622924,-0.10294349476855066,-0.057792841032971214,0.10394953263500895,0.0076709957922819465,-0.08588052744859123,0.06846519798855062,0.0547052645652507,0.10789004183387416]
[0.0454052049244803,0.011724611447432918,0.23118362175690813,-0.0841654079558968,0.017940514680346256,-0.004922840248337888,-0.04212501514360986,0.04287793418984337,-6.545549600669193E-4,-0.00564275765262771,0.01975523560911632,-0.2941430968561444,-0.06055381292881544,1.0,-0.003013758799328021,-0.0518681676573875,-0.03634605173436234,-0.043563472762793404,0.06965963637992602,-0.03133740675432332,-0.04320367280598631,0.11918947458123848,0.03508797610339157,0.027321079648522775]
[-0.057690277761636356,-0.002846241074230112,0.007219962823030489,-0.06597100580924475,0.031182373021696727,0.05957697047636998,-0.10616419877179298,0.09639615476919611,0.049453809884387974,-0.0037754161302123077,-0.08412827380625157,0.007747144257884008,-0.008104059788975443,-0.003013758799328021,1.0,-0.14575136484857668,-0.13535941396545711,-0.13360434820375153,-0.13195419696470836,-0.12375536173811946,-0.12140383133520953,-0.11622553608241713,-0.1055000593248435,-0.09774603748447783]
[0.049149203125117294,0.017312885954750695,0.07787017984670773,0.028433317451474878,0.008198158952193937,-0.029933358197436144,0.11232652133704574,-0.113147632863956,-0.02054724178659155,0.05915541319819142,0.01793725032458014,0.066102535894705,-0.048603097382622924,-0.0518681676573875,-0.14575136484857668,1.0,-0.1305848054171451,-0.12889164707468137,-0.12729970254606288,-0.11939006943414227,-0.11712148588239274,-0.11212584754318579,-0.1017786965445025,-0.0942981866666831]
[-0.05301211241476521,-0.0286553056327543,-0.22854089355384072,0.03848525456400911,-0.022296626312057432,0.013483221315966182,-0.04572119020156211,0.04510746936820448,0.010827150997467241,-0.014206370561454495,-0.022460857183010812,0.1123669966096905,-0.10294349476855066,-0.03634605173436234,-0.13535941396545711,-0.1305848054171451,1.0,-0.1197017800224172,-0.11822333981238427,-0.11087765695155033,-0.10877082151700385,-0.10413136802934052,-0.0945219602762882,-0.08757480452048169]
[-0.044128002541469896,0.010699077582801593,-0.21459448461392902,-0.024694936885413455,0.05630263215712669,0.08095485533244098,0.018785256256795575,-0.011021304554050978,-0.03331025648705988,-0.0140221712225236,-0.07806438311058082,0.07041752026334143,-0.057792841032971214,-0.043563472762793404,-0.13360434820375153,-0.12889164707468137,-0.1197017800224172,1.0,-0.11669045983115038,-0.10944002085552332,-0.10736050258073984,-0.1027812040961951,-0.09329639161172128,-0.08643931245163171]
[0.0439567703643684,-0.004849169748145618,0.1126486840989277,-0.014679517961457037,-0.043606117385336374,-0.06158780099420371,-0.04725952500130957,0.039700618250265,0.04100548810102117,-4.4753144333420396E-4,0.040766096599064786,-0.12523223220778373,0.10394953263500895,0.06965963637992602,-0.13195419696470836,-0.12729970254606288,-0.11822333981238427,-0.11669045983115038,1.0,-0.10808832393514879,-0.1060344898518148,-0.10151175041770377,-0.0921440851315343,-0.08537169795807815]
[-0.004960227934067791,0.036108945334263204,0.0027144612523195295,-0.016053850990729247,0.04538729851666979,0.041838899903988834,0.012677117611938123,-0.01701585768652595,0.029006844565769917,-0.012988490983473319,-0.01614058206665801,0.004963138167993373,0.0076709957922819465,-0.03133740675432332,-0.12375536173811946,-0.11939006943414227,-0.11087765695155033,-0.10944002085552332,-0.10808832393514879,1.0,-0.09944614836190403,-0.09520442458508954,-0.08641880932768635,-0.08006721730742025]
[-0.051901577087191564,-0.04350495235395795,0.028684095226638652,0.068820202284532,-0.07504379419186769,-0.06587146061270517,-0.03378901881691957,0.040932213735057586,-0.030268421759150753,-0.012741690917548168,0.0941833805669974,0.09836701073849302,-0.08588052744859123,-0.04320367280598631,-0.12140383133520953,-0.11712148588239274,-0.10877082151700385,-0.10736050258073984,-0.1060344898518148,-0.09944614836190403,1.0,-0.09339540317576162,-0.08477672728240608,-0.07854582467335226]
[0.10234363855084291,0.013712616172825258,0.131993405406529,-0.0076232821354340705,0.0011866325195637405,-0.029345644268499043,0.03148717764442516,-0.028405209528430984,-0.01636785564491817,-0.012198213525893955,0.028359062277911427,-0.10930410844563718,0.06846519798855062,0.11918947458123848,-0.11622553608241713,-0.11212584754318579,-0.10413136802934052,-0.1027812040961951,-0.10151175041770377,-0.09520442458508954,-0.09339540317576162,1.0,-0.08116070528700767,-0.07519557232497581]
[0.03838263316259876,-0.011667674079174347,0.07275335591466643,0.05103289153797026,-0.0752471388896022,-0.09659958963019777,0.013284549378994549,-0.00979003292797672,-0.026303290894030145,0.021201372968918174,0.09603902527338085,-0.06520639249836198,0.0547052645652507,0.03508797610339157,-0.1055000593248435,-0.1017786965445025,-0.0945219602762882,-0.09329639161172128,-0.0921440851315343,-0.08641880932768635,-0.08477672728240608,-0.08116070528700767,1.0,-0.0682564056802888]
[-7.928070424792312E-4,0.015602736665106537,0.042805608780509805,-0.07742504818692611,0.07942506035773907,0.08705504524904685,0.03994385415450512,-0.03430913784214987,-0.02437005698524339,-0.01025873553037604,-0.06483300574647058,-0.11340048451145428,0.10789004183387416,0.027321079648522775,-0.09774603748447783,-0.0942981866666831,-0.08757480452048169,-0.08643931245163171,-0.08537169795807815,-0.08006721730742025,-0.07854582467335226,-0.07519557232497581,-0.0682564056802888,1.0]

corr.toDense.rowIter.foreach( x => {
  val size = x.size
  for ( i <- Range(0,size)) { 
    val elem = x(i)
    print(f"$elem%.3f\t") 
  }
  println
})
// "Kilometers_Driven","Seats","age","mileage_aux","engine_aux","power_aux", "Fuel_TypeVect","TransmissionVect","Owner_TypeVect","LocationVect"
1.000   0.083   0.173   -0.065  0.090   0.030   0.104   -0.104  -0.003  0.001  0.026    -0.079  0.062   0.045   -0.058  0.049   -0.053  -0.044  0.044   -0.005 -0.052   0.102   0.038   -0.001
0.083   1.000   -0.015  -0.300  0.394   0.106   0.309   -0.302  -0.029  -0.014 0.075    -0.002  -0.006  0.012   -0.003  0.017   -0.029  0.011   -0.005  0.036  -0.044   0.014   -0.012  0.016
0.173   -0.015  1.000   -0.322  0.046   -0.040  -0.126  0.127   -0.019  0.032  0.097    -0.373  0.298   0.231   0.007   0.078   -0.229  -0.215  0.113   0.003  0.029    0.132   0.073   0.043
-0.065  -0.300  -0.322  1.000   -0.581  -0.482  0.113   -0.144  0.154   0.011  0.333    0.151   -0.123  -0.084  -0.066  0.028   0.038   -0.025  -0.015  -0.016 0.069    -0.008  0.051   -0.077
0.090   0.394   0.046   -0.581  1.000   0.860   0.429   -0.409  -0.085  -0.040 -0.499   -0.047  0.041   0.018   0.031   0.008   -0.022  0.056   -0.044  0.045  -0.075   0.001   -0.075  0.079
0.030   0.106   -0.040  -0.482  0.860   1.000   0.293   -0.273  -0.086  -0.040 -0.642   -0.020  0.024   -0.005  0.060   -0.030  0.013   0.081   -0.062  0.042  -0.066   -0.029  -0.097  0.087
0.104   0.309   -0.126  0.113   0.429   0.293   1.000   -0.978  -0.103  -0.044 -0.142   0.039   -0.026  -0.042  -0.106  0.112   -0.046  0.019   -0.047  0.013  -0.034   0.031   0.013   0.040
-0.104  -0.302  0.127   -0.144  -0.409  -0.273  -0.978  1.000   -0.089  -0.037 0.129    -0.039  0.025   0.043   0.096   -0.113  0.045   -0.011  0.040   -0.017 0.041    -0.028  -0.010  -0.034
-0.003  -0.029  -0.019  0.154   -0.085  -0.086  -0.103  -0.089  1.000   -0.004 0.061    -0.004  0.005   -0.001  0.049   -0.021  0.011   -0.033  0.041   0.029  -0.030   -0.016  -0.026  -0.024
0.001   -0.014  0.032   0.011   -0.040  -0.040  -0.044  -0.037  -0.004  1.000  0.026    -0.002  0.004   -0.006  -0.004  0.059   -0.014  -0.014  -0.000  -0.013 -0.013   -0.012  0.021   -0.010
0.026   0.075   0.097   0.333   -0.499  -0.642  -0.142  0.129   0.061   0.026  1.000    -0.000  -0.008  0.020   -0.084  0.018   -0.022  -0.078  0.041   -0.016 0.094    0.028   0.096   -0.065
-0.079  -0.002  -0.373  0.151   -0.047  -0.020  0.039   -0.039  -0.004  -0.002 -0.000   1.000   -0.931  -0.294  0.008   0.066   0.112   0.070   -0.125  0.005  0.098    -0.109  -0.065  -0.113
0.062   -0.006  0.298   -0.123  0.041   0.024   -0.026  0.025   0.005   0.004  -0.008   -0.931  1.000   -0.061  -0.008  -0.049  -0.103  -0.058  0.104   0.008  -0.086   0.068   0.055   0.108
0.045   0.012   0.231   -0.084  0.018   -0.005  -0.042  0.043   -0.001  -0.006 0.020    -0.294  -0.061  1.000   -0.003  -0.052  -0.036  -0.044  0.070   -0.031 -0.043   0.119   0.035   0.027
-0.058  -0.003  0.007   -0.066  0.031   0.060   -0.106  0.096   0.049   -0.004 -0.084   0.008   -0.008  -0.003  1.000   -0.146  -0.135  -0.134  -0.132  -0.124 -0.121   -0.116  -0.106  -0.098
0.049   0.017   0.078   0.028   0.008   -0.030  0.112   -0.113  -0.021  0.059  0.018    0.066   -0.049  -0.052  -0.146  1.000   -0.131  -0.129  -0.127  -0.119 -0.117   -0.112  -0.102  -0.094
-0.053  -0.029  -0.229  0.038   -0.022  0.013   -0.046  0.045   0.011   -0.014 -0.022   0.112   -0.103  -0.036  -0.135  -0.131  1.000   -0.120  -0.118  -0.111 -0.109   -0.104  -0.095  -0.088
-0.044  0.011   -0.215  -0.025  0.056   0.081   0.019   -0.011  -0.033  -0.014 -0.078   0.070   -0.058  -0.044  -0.134  -0.129  -0.120  1.000   -0.117  -0.109 -0.107   -0.103  -0.093  -0.086
0.044   -0.005  0.113   -0.015  -0.044  -0.062  -0.047  0.040   0.041   -0.000 0.041    -0.125  0.104   0.070   -0.132  -0.127  -0.118  -0.117  1.000   -0.108 -0.106   -0.102  -0.092  -0.085
-0.005  0.036   0.003   -0.016  0.045   0.042   0.013   -0.017  0.029   -0.013 -0.016   0.005   0.008   -0.031  -0.124  -0.119  -0.111  -0.109  -0.108  1.000  -0.099   -0.095  -0.086  -0.080
-0.052  -0.044  0.029   0.069   -0.075  -0.066  -0.034  0.041   -0.030  -0.013 0.094    0.098   -0.086  -0.043  -0.121  -0.117  -0.109  -0.107  -0.106  -0.099 1.000    -0.093  -0.085  -0.079
0.102   0.014   0.132   -0.008  0.001   -0.029  0.031   -0.028  -0.016  -0.012 0.028    -0.109  0.068   0.119   -0.116  -0.112  -0.104  -0.103  -0.102  -0.095 -0.093   1.000   -0.081  -0.075
0.038   -0.012  0.073   0.051   -0.075  -0.097  0.013   -0.010  -0.026  0.021  0.096    -0.065  0.055   0.035   -0.106  -0.102  -0.095  -0.093  -0.092  -0.086 -0.085   -0.081  1.000   -0.068
-0.001  0.016   0.043   -0.077  0.079   0.087   0.040   -0.034  -0.024  -0.010 -0.065   -0.113  0.108   0.027   -0.098  -0.094  -0.088  -0.086  -0.085  -0.080 -0.079   -0.075  -0.068  1.000

// engine_aux x power_aux = 0.860 can be considered multicolinear


// ----- building the logistic regression model

import org.apache.spark.ml.feature.StandardScaler
val stdScaler = new StandardScaler().
setWithStd(true).
setWithMean(true).
setInputCol("features").
setOutputCol("scaledFeatures")

import org.apache.spark.ml.regression.LinearRegression
val lr = new LinearRegression
lr.setRegParam(0.01).setMaxIter(500).setFitIntercept(true).setFeaturesCol("scaledFeatures")

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(dfInd1,dfInd2,dfInd3,dfInd4,dfOne1,dfOne2,dfOne3,dfOne4,va,stdScaler,lr))

val Array(trainingData, testData) = df2.randomSplit(Array(0.7,0.3),11L)

trainingData.cache
testData.cache

val model = pipeline.fit(trainingData)

val pred = model.transform(testData)

import org.apache.spark.ml.evaluation.RegressionEvaluator
val bceval = new RegressionEvaluator()

bceval.setMetricName("rmse").evaluate(pred)
res40: Double = 6.260576800355838

bceval.setMetricName("r2").evaluate(pred)
res41: Double = 0.7153624124730613

import org.apache.spark.ml.regression.LinearRegressionModel
val lrmodel = model.stages(10).asInstanceOf[LinearRegressionModel]

lrmodel.summary.rootMeanSquaredError
res45: Double = 6.078332856603523

lrmodel.summary.r2
res46: Double = 0.6922917015068639

println(s"LR Model coefficients:\n${lrmodel.coefficients.toArray.mkString("\n")}")
LR Model coefficients:
0.18750629225017484
-0.941402582428837
-3.197529174975522
-1.18772098514349
0.47428796388063765
6.065581494216399
-1.435404027762112
-2.73055410943865
-0.1346106828147817
-0.06230678970205193
-1.3458944410030675
0.14589063142694653
-0.07350978926264784
0.13228825297662308
-0.15450651192317288
0.668237935213271
0.0011580969091130294
0.6445695589627348
0.07519802049962133
-0.2912211324690729
-0.06126936943185173
0.21546009028868154
0.16073731959609494
0.35853732574927716

------------------------------

import org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}

val paramGrid = new ParamGridBuilder().
addGrid(lr.regParam, Array(0.1, 0.01, 0.001)).
addGrid(lr.fitIntercept, Array(true)).
addGrid(lr.maxIter, Array(100,200,300)).build()

import org.apache.spark.ml.evaluation.RegressionEvaluator

val cv = new CrossValidator().
setEstimator(pipeline).
setEvaluator(new RegressionEvaluator).
setEstimatorParamMaps(paramGrid).
setNumFolds(3)

val model = cv.fit(trainingData)

import org.apache.spark.ml.PipelineModel
val bestmodel = model.bestModel.asInstanceOf[PipelineModel]

val pred = bestmodel.transform(testData)

val bceval = new RegressionEvaluator()

bceval.setMetricName("rmse").evaluate(pred)
res48: Double = 6.258808866102304

bceval.setMetricName("r2").evaluate(pred)
res49: Double = 0.7155231482979709

import org.apache.spark.ml.regression.LinearRegressionModel
val lrmodel = bestmodel.stages(6).asInstanceOf[LinearRegressionModel]

lrmodel.getRegParam
res1: Double = 0.01

lrmodel.getMaxIter
res2: Int = 500

lrmodel.getFitIntercept
res4: Boolean = true

lrmodel.getStandardization
res5: Boolean = true

lrmodel.summary.rootMeanSquaredError
res54: Double = 6.078332856603523

lrmodel.summary.r2
res55: Double = 0.6922917015068639

println(s"LR Model coefficients:\n${lrmodel.coefficients.toArray.mkString("\n")}")
LR Model coefficients:
0.18750629225017484
-0.941402582428837
-3.197529174975522
-1.18772098514349
0.47428796388063765
6.065581494216399
-1.435404027762112
-2.73055410943865
-0.1346106828147817
-0.06230678970205193
-1.3458944410030675
0.14589063142694653
-0.07350978926264784
0.13228825297662308
-0.15450651192317288
0.668237935213271
0.0011580969091130294
0.6445695589627348
0.07519802049962133
-0.2912211324690729
-0.06126936943185173
0.21546009028868154
0.16073731959609494
0.35853732574927716