---- Feature extraction & Data Munging --------------

val hdr = sc.textFile("used_cars/used_cars_price_train-data.hdr").map( x => x.split(",")).take(1)(0)

hdr.take(1)
res0: Array[Array[String]] = Array(Array("", Name, Location, Year, Kilometers_Driven, Fuel_Type, Transmission, Owner_Type, Mileage, Engine, Power, Seats, New_Price, Price))

val rdd = sc.textFile("used_cars/used_cars_price_train-data.csv").map(x => x.split(","))

// ID,Name,Location,Year,Kilometers_Driven,Fuel_Type,Transmission,Owner_Type,Mileage,Engine,Power,Seats,New_Price,Price
rdd.take(2)
res0: Array[Array[String]] = Array(Array(0, Maruti Wagon R LXI CNG, Mumbai, 2010, 72000, CNG, Manual, First, 26.6 km/kg, 998 CC, 58.16 bhp, 5.0, "", 1.75), Array(1, Hyundai Creta 1.6 CRDi SX Option, Pune, 2015, 41000, Diesel, Manual, First, 19.67 kmpl, 1582 CC, 126.2 bhp, 5.0, "", 12.5))

rdd.count
res1: Long = 6019

val orderingDesc = Ordering.by[(String, Int), Int](_._2)

// Name
rdd.map( x => x(1)).distinct.count
res3: Long = 1876


// Location
rdd.map( x => x(2)).distinct.count
res11: Long = 11

rdd.map( x => (x(2),1) ).reduceByKey(_+_).top(15)(orderingDesc).mkString("\n")
res8: String =
(Mumbai,790)
(Hyderabad,742)
(Kochi,651)
(Coimbatore,636)
(Pune,622)
(Delhi,554)
(Kolkata,535)
(Chennai,494)
(Jaipur,413)
(Bangalore,358)
(Ahmedabad,224)


// Year
rdd.map( x => x(3)).distinct.count
res5: Long = 22

rdd.map( x => (x(3),1) ).reduceByKey(_+_).top(25)(orderingDesc).mkString("\n")
res12: String =
(2014,797)
(2015,744)
(2016,741)
(2013,649)
(2017,587)
(2012,580)
(2011,466)
(2010,342)
(2018,298)
(2009,198)
(2008,174)
(2007,125)
(2019,102)
(2006,78)
(2005,57)
(2004,31)
(2003,17)
(2002,15)
(2001,8)
(2000,4)
(1998,4)
(1999,2)


// Kilometers_Driven
rdd.filter(x => x(4) == "").count
res33: Long = 0


// Fuel_Type
rdd.map( x => x(5)).distinct.count
res6: Long = 5

rdd.map( x => (x(5),1) ).reduceByKey(_+_).top(10)(orderingDesc).mkString("\n")
res14: String =
(Diesel,3205)
(Petrol,2746)
(CNG,56)
(LPG,10)
(Electric,2)


// Transmission
rdd.map( x => x(6)).distinct.count
res7: Long = 2

rdd.map( x => (x(6),1) ).reduceByKey(_+_).top(10)(orderingDesc).mkString("\n")
res15: String =
(Manual,4299)
(Automatic,1720)


// Owner_Type
rdd.map( x => x(7)).distinct.count
res8: Long = 4

rdd.map( x => (x(7),1) ).reduceByKey(_+_).top(10)(orderingDesc).mkString("\n")
res16: String =
(First,4929)
(Second,968)
(Third,113)
(Fourth & Above,9)


// Mileage
rdd.filter(x => x(8) == "").count
res37: Long = 2

rdd.map( x => x(8)).distinct.count
res17: Long = 443

rdd.map( x => (x(8),1) ).reduceByKey(_+_).top(3)(orderingDesc).mkString("\n")
res47: String =
(18.9 kmpl,172)
(17.0 kmpl,172)
(18.6 kmpl,119)


// Engine
rdd.filter(x => x(9) == "").count
res38: Long = 36

rdd.map( x => x(9)).distinct.count
res18: Long = 147

rdd.map( x => (x(9),1) ).reduceByKey(_+_).top(3)(orderingDesc).mkString("\n")
res48: String =
(1197 CC,606)
(1248 CC,512)
(1498 CC,304)


// Power
rdd.filter(x => x(10) == "").count
res39: Long = 36

rdd.map( x => x(10)).distinct.count
res19: Long = 373

rdd.map( x => (x(10),1) ).reduceByKey(_+_).top(3)(orderingDesc).mkString("\n")
res49: String =
(74 bhp,235)
(98.6 bhp,131)
(73.9 bhp,125)


// Seats
rdd.filter(x => x(11) == "").count
res40: Long = 42

rdd.map( x => x(11)).distinct.count
res20: Long = 10

rdd.map( x => (x(11),1) ).reduceByKey(_+_).top(3)(orderingDesc).mkString("\n")
res50: String =
(5.0,5014)
(7.0,674)
(8.0,134)


// New_Price - removed from analysis
rdd.filter(x => x(12) == "").count
res41: Long = 5195


// Price
rdd.filter(x => x(13) == "").count
res42: Long = 0


// for numerical columns, removing embebbed chars and converting to doubles
val rdd2 = rdd.map( x => {
   val age = 2021 - x(3).toDouble
   val km_driven = x(4).toDouble/1000
   //
   val mileage_aux = ("""[0-9]+\.[0-9]+""".r findAllIn x(8)).toList
   val mileage = if (mileage_aux.isEmpty) 18.9 else mileage_aux.head.toDouble
   //
   val engine_aux = ("""[0-9]+\.[0-9]+""".r findAllIn x(9)).toList
   val engine = if (engine_aux.isEmpty) 1197.0 else engine_aux.head.toDouble
   //
   val power_aux = ("""[0-9]+\.[0-9]+""".r findAllIn x(10)).toList
   val power = if (power_aux.isEmpty) 74.0 else power_aux.head.toDouble
   //
   val seats = if (x(11).isEmpty) 5.0 else x(11).toDouble
   val price = x(13).toDouble
   //
   Array(age,km_driven,mileage,engine,power,seats,price)
 })
 
rdd2.take(2)
res21: Array[Array[Double]] = Array(Array(11.0, 72.0, 26.6, 1197.0, 58.16, 5.0, 1.75), Array(6.0, 41.0, 19.67, 1197.0, 126.2, 5.0, 12.5))


// extracting from model description only car maker
val rdd3 = rdd.map( x => {
  val model_car = x(1).substring(0,x(1).indexOf(' ',x(1).indexOf(' ',1)+1))
  Array(model_car,x(2),x(5),x(6),x(7))
})

rdd3.take(2)
res28: Array[Array[String]] = Array(Array(Maruti Wagon, Mumbai, CNG, Manual, First), Array(Hyundai Creta, Pune, Diesel, Manual, First))


// maker + model will be removed from analysis due to greater number of categories
rdd3.map( x => x(0) ).distinct.count
res27: Long = 216


---- Conversion to 1-to-k binary encoding vectors 

def oneHotEncColumns(rddx: org.apache.spark.rdd.RDD[Array[String]], idx: Int):org.apache.spark.rdd.RDD[Array[Double]] = {
  print(hdr(idx) + " : ")
  val categories = rddx.map(r => r(idx)).distinct.zipWithIndex.collectAsMap
  println(categories)
  val numCategories = categories.size
  val vetcateg = rddx.map(r => {
    val categoryIdx = categories(r(idx)).toInt
	val categoryFeatures = if (numCategories > 2) Array.ofDim[Double](numCategories) else Array.ofDim[Double](1)
	if (numCategories > 2) categoryFeatures(categoryIdx) = 1.0 else categoryFeatures(0) = categoryIdx
    categoryFeatures
	})
  vetcateg
}

def mergeArray(rddx: org.apache.spark.rdd.RDD[Array[String]], idx: Int*):org.apache.spark.rdd.RDD[Array[Double]] = {
  var i = 0
  var arr1 = oneHotEncColumns(rddx,idx(i))
  for (j <- 1 until idx.size) {
    var arr2 = oneHotEncColumns(rddx,idx(j))
    var flt1 = arr1.zip(arr2).map(x => (x._1.toList ++ x._2.toList).toArray)
    arr1 = flt1
  }
  arr1
}

val concat = mergeArray(rdd3,1,2,3,4)
Name : Map(Bangalore -> 7, Chennai -> 1, Kolkata -> 6, Pune -> 4, Kochi -> 0, Mumbai -> 10, Coimbatore -> 9, Hyderabad -> 3, Ahmedabad -> 8, Delhi -> 2, Jaipur -> 5)
Location : Map(Electric -> 3, Petrol -> 2, LPG -> 4, Diesel -> 1, CNG -> 0)
Year : Map(Automatic -> 1, Manual -> 0)
Kilometers_Driven : Map(Second -> 1, Third -> 2, First -> 0, Fourth & Above -> 3)

concat.first.size
res29: Int = 21

// merging the numerical columns with 1-of-k vectors produced
val vect = concat.zip(rdd2).map(x => (x._1.toList ++ x._2.toList).toArray)

vect.first.size
res30: Int = 28

import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

val data = vect.map(x => {
  val arr_size = x.size - 1 
  val l = x(arr_size)
  val f = x.slice(0,arr_size)
  LabeledPoint(l,Vectors.dense(f))
})

val sets = data.randomSplit(Array(0.7,0.3), 11L)
val trainSet = sets(0)
val testSet = sets(1)

trainSet.cache
testSet.cache

// ----- building the logistic regression model

import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.regression.LinearRegressionWithSGD
import org.apache.spark.mllib.evaluation.RegressionMetrics

val model = new LinearRegressionWithSGD

model.setIntercept(true)
model.optimizer.setNumIterations(100).setStepSize(0.1).setRegParam(0.01)

val lr = model.run(trainSet)

val validPredicts = testSet.map(x => (lr.predict(x.features),x.label))

val metrics = new RegressionMetrics(validPredicts)

metrics.rootMeanSquaredError
res35: Double = NaN

metrics.r2
res36: Double = NaN

----- Standardizing features ------------------------------

import org.apache.spark.mllib.feature.StandardScaler
val vectors = trainSet.map(lp => lp.features)
val scaler = new StandardScaler(withMean = true, withStd = true).fit(vectors)
val trainScaled = trainSet.map(lp => LabeledPoint(lp.label,scaler.transform(lp.features)))
val testScaled = testSet.map(lp => LabeledPoint(lp.label,scaler.transform(lp.features)))

trainScaled.cache
testScaled.cache

// ----- building the logistic regression model

import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.regression.LinearRegressionWithSGD
import org.apache.spark.mllib.evaluation.RegressionMetrics

val model = new LinearRegressionWithSGD

model.setIntercept(true)
model.optimizer.setNumIterations(100).setStepSize(0.1).setRegParam(0.01)

val lr = model.run(trainScaled)

val validPredicts = testScaled.map(x => (lr.predict(x.features),x.label))

val metrics = new RegressionMetrics(validPredicts)

metrics.rootMeanSquaredError
res21: Double = 10.449494763990643

metrics.r2
rres22: Double = 0.17519217363526962


---- MLlib Linear regression --------------

import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.regression.LinearRegressionWithSGD
import org.apache.spark.mllib.evaluation.RegressionMetrics

def iterateLRwSGD(iterNums:Array[Int], stepSizes:Array[Double], regSizes:Array[Double], train:RDD[LabeledPoint], test:RDD[LabeledPoint]) = {
  println("iter, reg  -> RMSE, MSE, R2") 
  for(numIter <- iterNums; step <- stepSizes; reg <- regSizes) {
    val model = new LinearRegressionWithSGD
	model.setIntercept(true)
	model.optimizer.setNumIterations(numIter).setStepSize(step).setRegParam(reg)
	val lr = model.run(train)
    val validPredicts = test.map(x => (lr.predict(x.features),x.label))
    val metrics = new RegressionMetrics(validPredicts)
    println("%d, %7.5f, %7.5f -> %.4f, %.4f, %.4f".format(numIter, step, reg, metrics.rootMeanSquaredError, metrics.meanSquaredError, metrics.r2))
  }
}

iterateLRwSGD(Array(10, 20, 40, 100),Array(1, 0.1, 0.01, 0.001),Array(1, 0.1, 0.01, 0.001), trainSet, testSet)
iter, reg  -> RMSE, MSE, R2
10, 1.00000, 1.00000 -> 179830395037481920000000000000000000000000000000000000000000.0000, 32338970979336807000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -244280266101851120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
10, 1.00000, 0.10000 -> 179830395037481920000000000000000000000000000000000000000000.0000, 32338970979336807000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -244280266101851120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
10, 1.00000, 0.01000 -> 179830395037481920000000000000000000000000000000000000000000.0000, 32338970979336807000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -244280266101851120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
10, 1.00000, 0.00100 -> 179830395037481920000000000000000000000000000000000000000000.0000, 32338970979336807000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -244280266101851120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
10, 0.10000, 1.00000 -> 17980523868551982000000000000000000000000000000000.0000, 323299238587567500000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -2442119264807739600000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
10, 0.10000, 0.10000 -> 17980523868551982000000000000000000000000000000000.0000, 323299238587567500000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -2442119264807739600000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
10, 0.10000, 0.01000 -> 17980523868551982000000000000000000000000000000000.0000, 323299238587567500000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -2442119264807739600000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
10, 0.10000, 0.00100 -> 17980523868551982000000000000000000000000000000000.0000, 323299238587567500000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -2442119264807739600000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
10, 0.01000, 1.00000 -> 1795538475753836700000000000000000000000.0000, 3223958417912411000000000000000000000000000000000000000000000000000000000000000.0000, -24352952378483425000000000000000000000000000000000000000000000000000000000000.0000
10, 0.01000, 0.10000 -> 1795538475753836700000000000000000000000.0000, 3223958417912411000000000000000000000000000000000000000000000000000000000000000.0000, -24352952378483425000000000000000000000000000000000000000000000000000000000000.0000
10, 0.01000, 0.01000 -> 1795538475753836700000000000000000000000.0000, 3223958417912411000000000000000000000000000000000000000000000000000000000000000.0000, -24352952378483425000000000000000000000000000000000000000000000000000000000000.0000
10, 0.01000, 0.00100 -> 1795538475753836700000000000000000000000.0000, 3223958417912411000000000000000000000000000000000000000000000000000000000000000.0000, -24352952378483425000000000000000000000000000000000000000000000000000000000000.0000
10, 0.00100, 1.00000 -> 177057107657072960000000000000.0000, 31349219371888320000000000000000000000000000000000000000000.0000, -236803937117953100000000000000000000000000000000000000000.0000
10, 0.00100, 0.10000 -> 177057107657072960000000000000.0000, 31349219371888320000000000000000000000000000000000000000000.0000, -236803937117953100000000000000000000000000000000000000000.0000
10, 0.00100, 0.01000 -> 177057107657072960000000000000.0000, 31349219371888320000000000000000000000000000000000000000000.0000, -236803937117953100000000000000000000000000000000000000000.0000
10, 0.00100, 0.00100 -> 177057107657072960000000000000.0000, 31349219371888320000000000000000000000000000000000000000000.0000, -236803937117953100000000000000000000000000000000000000000.0000








20, 0.01000, 1.00000 -> 870662992894890500000000000000000000000000000000000000000000000000000000000.0000, 758054047196688100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -5726145228526679000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
20, 0.01000, 0.10000 -> 870662992894890500000000000000000000000000000000000000000000000000000000000.0000, 758054047196688100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -5726145228526679000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
20, 0.01000, 0.01000 -> 870662992894890500000000000000000000000000000000000000000000000000000000000.0000, 758054047196688100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -5726145228526679000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
20, 0.01000, 0.00100 -> 870662992894890500000000000000000000000000000000000000000000000000000000000.0000, 758054047196688100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -5726145228526679000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
20, 0.00100, 1.00000 -> 8378248583950424000000000000000000000000000000000000000.0000, 70195049334467290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -530235341792804460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
20, 0.00100, 0.10000 -> 8378248583950424000000000000000000000000000000000000000.0000, 70195049334467290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -530235341792804460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
20, 0.00100, 0.01000 -> 8378248583950424000000000000000000000000000000000000000.0000, 70195049334467290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -530235341792804460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
20, 0.00100, 0.00100 -> 8378248583950424000000000000000000000000000000000000000.0000, 70195049334467290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -530235341792804460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000
40, 1.00000, 1.00000 -> Infinity, Infinity, -Infinity
40, 1.00000, 0.10000 -> Infinity, Infinity, -Infinity
40, 1.00000, 0.01000 -> Infinity, Infinity, -Infinity
40, 1.00000, 0.00100 -> Infinity, Infinity, -Infinity
40, 0.10000, 1.00000 -> Infinity, Infinity, -Infinity
40, 0.10000, 0.10000 -> Infinity, Infinity, -Infinity
40, 0.10000, 0.01000 -> Infinity, Infinity, -Infinity
40, 0.10000, 0.00100 -> Infinity, Infinity, -Infinity





40, 0.00100, 0.10000 -> 21248208145675377000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, 451486349401945440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000, -3410411717915531600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0000


100, 1.00000, 1.00000 -> NaN, NaN, NaN
100, 1.00000, 0.10000 -> NaN, NaN, NaN
100, 1.00000, 0.01000 -> NaN, NaN, NaN
100, 1.00000, 0.00100 -> NaN, NaN, NaN
100, 0.10000, 1.00000 -> NaN, NaN, NaN
100, 0.10000, 0.10000 -> NaN, NaN, NaN
100, 0.10000, 0.01000 -> NaN, NaN, NaN
100, 0.10000, 0.00100 -> NaN, NaN, NaN
100, 0.01000, 1.00000 -> NaN, NaN, NaN
100, 0.01000, 0.10000 -> NaN, NaN, NaN
100, 0.01000, 0.01000 -> NaN, NaN, NaN
100, 0.01000, 0.00100 -> NaN, NaN, NaN
100, 0.00100, 1.00000 -> Infinity, Infinity, -Infinity
100, 0.00100, 0.10000 -> Infinity, Infinity, -Infinity
100, 0.00100, 0.01000 -> Infinity, Infinity, -Infinity
100, 0.00100, 0.00100 -> Infinity, Infinity, -Infinity


----- Decide to scale features because variabiliaty increases even reducing step size of model 

import org.apache.spark.mllib.feature.StandardScaler
val scaler = new StandardScaler(true, true).fit(trainSet.map(x => x.features))
 
val trainScaled = trainSet.map(x => LabeledPoint(x.label,scaler.transform(x.features)))
val testScaled = testSet.map(x => LabeledPoint(x.label, scaler.transform(x.features)))

trainScaled.cache
testScaled.cache

---- MLlib Linear regression --------------

import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.regression.LinearRegressionWithSGD
import org.apache.spark.mllib.evaluation.RegressionMetrics

def iterateLRwSGD(iterNums:Array[Int], stepSizes:Array[Double], regSizes:Array[Double], train:RDD[LabeledPoint], test:RDD[LabeledPoint]) = {
  println("iter, reg  -> RMSE, MSE, R2") 
  for(numIter <- iterNums; step <- stepSizes; reg <- regSizes) {
    val model = new LinearRegressionWithSGD
	model.setIntercept(true)
	model.optimizer.setNumIterations(numIter).setStepSize(step).setRegParam(reg)
	val lr = model.run(train)
    val validPredicts = test.map(x => (lr.predict(x.features),x.label))
    val metrics = new RegressionMetrics(validPredicts)
    println("%d, %7.5f, %7.5f -> %.4f, %.4f, %.4f".format(numIter, step, reg, metrics.rootMeanSquaredError, metrics.meanSquaredError, metrics.r2))
  }
}

iterateLRwSGD(Array(10, 20, 40, 100),Array(1, 0.1, 0.01, 0.001),Array(1, 0.1, 0.01, 0.001), trainScaled, testScaled)
iter, reg  -> RMSE, MSE, R2
10, 1.00000, 1.00000 -> 10.6107, 112.5877, 0.1495
10, 1.00000, 0.10000 -> 10.6107, 112.5877, 0.1495
10, 1.00000, 0.01000 -> 10.6107, 112.5877, 0.1495
10, 1.00000, 0.00100 -> 10.6107, 112.5877, 0.1495
10, 0.10000, 1.00000 -> 10.8983, 118.7729, 0.1028
10, 0.10000, 0.10000 -> 10.8983, 118.7729, 0.1028
10, 0.10000, 0.01000 -> 10.8983, 118.7729, 0.1028
10, 0.10000, 0.00100 -> 10.8983, 118.7729, 0.1028
10, 0.01000, 1.00000 -> 13.5421, 183.3895, -0.3853
10, 0.01000, 0.10000 -> 13.5421, 183.3895, -0.3853
10, 0.01000, 0.01000 -> 13.5421, 183.3895, -0.3853
10, 0.01000, 0.00100 -> 13.5421, 183.3895, -0.3853
10, 0.00100, 1.00000 -> 14.0725, 198.0355, -0.4959
10, 0.00100, 0.10000 -> 14.0725, 198.0355, -0.4959
10, 0.00100, 0.01000 -> 14.0725, 198.0355, -0.4959
10, 0.00100, 0.00100 -> 14.0725, 198.0355, -0.4959
20, 1.00000, 1.00000 -> 10.5088, 110.4354, 0.1658
20, 1.00000, 0.10000 -> 10.5088, 110.4354, 0.1658
20, 1.00000, 0.01000 -> 10.5088, 110.4354, 0.1658
20, 1.00000, 0.00100 -> 10.5088, 110.4354, 0.1658
20, 0.10000, 1.00000 -> 10.5223, 110.7198, 0.1637
20, 0.10000, 0.10000 -> 10.5223, 110.7198, 0.1637
20, 0.10000, 0.01000 -> 10.5223, 110.7198, 0.1637
20, 0.10000, 0.00100 -> 10.5223, 110.7198, 0.1637
20, 0.01000, 1.00000 -> 13.2721, 176.1489, -0.3306
20, 0.01000, 0.10000 -> 13.2721, 176.1489, -0.3306
20, 0.01000, 0.01000 -> 13.2721, 176.1489, -0.3306
20, 0.01000, 0.00100 -> 13.2721, 176.1489, -0.3306
20, 0.00100, 1.00000 -> 14.0405, 197.1346, -0.4891
20, 0.00100, 0.10000 -> 14.0405, 197.1346, -0.4891
20, 0.00100, 0.01000 -> 14.0405, 197.1346, -0.4891
20, 0.00100, 0.00100 -> 14.0405, 197.1346, -0.4891
40, 1.00000, 1.00000 -> 10.4759, 109.7452, 0.1710
40, 1.00000, 0.10000 -> 10.4759, 109.7452, 0.1710
40, 1.00000, 0.01000 -> 10.4759, 109.7452, 0.1710
40, 1.00000, 0.00100 -> 10.4759, 109.7452, 0.1710
40, 0.10000, 1.00000 -> 10.3818, 107.7811, 0.1858
40, 0.10000, 0.10000 -> 10.3818, 107.7811, 0.1858
40, 0.10000, 0.01000 -> 10.3818, 107.7811, 0.1858
40, 0.10000, 0.00100 -> 10.3818, 107.7811, 0.1858
40, 0.01000, 1.00000 -> 12.9225, 166.9907, -0.2614
40, 0.01000, 0.10000 -> 12.9225, 166.9907, -0.2614
40, 0.01000, 0.01000 -> 12.9225, 166.9907, -0.2614
40, 0.01000, 0.00100 -> 12.9225, 166.9907, -0.2614
40, 0.00100, 1.00000 -> 13.9952, 195.8650, -0.4795
40, 0.00100, 0.10000 -> 13.9952, 195.8650, -0.4795
40, 0.00100, 0.01000 -> 13.9952, 195.8650, -0.4795
40, 0.00100, 0.00100 -> 13.9952, 195.8650, -0.4795
100, 1.00000, 1.00000 -> 10.4759, 109.7452, 0.1710
100, 1.00000, 0.10000 -> 10.4759, 109.7452, 0.1710
100, 1.00000, 0.01000 -> 10.4759, 109.7452, 0.1710
100, 1.00000, 0.00100 -> 10.4759, 109.7452, 0.1710
100, 0.10000, 1.00000 -> 10.4495, 109.1919, 0.1752
100, 0.10000, 0.10000 -> 10.4495, 109.1919, 0.1752
100, 0.10000, 0.01000 -> 10.4495, 109.1919, 0.1752
100, 0.10000, 0.00100 -> 10.4495, 109.1919, 0.1752
100, 0.01000, 1.00000 -> 12.3353, 152.1590, -0.1494
100, 0.01000, 0.10000 -> 12.3353, 152.1590, -0.1494
100, 0.01000, 0.01000 -> 12.3353, 152.1590, -0.1494
100, 0.01000, 0.00100 -> 12.3353, 152.1590, -0.1494
100, 0.00100, 1.00000 -> 13.9064, 193.3873, -0.4608
100, 0.00100, 0.10000 -> 13.9064, 193.3873, -0.4608
100, 0.00100, 0.01000 -> 13.9064, 193.3873, -0.4608
100, 0.00100, 0.00100 -> 13.9064, 193.3873, -0.4608