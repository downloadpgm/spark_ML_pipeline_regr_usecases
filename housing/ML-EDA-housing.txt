
val df = spark.read.format("csv").option("inferSchema","true").option("ignoreLeadingWhiteSpace","true").load("staging/housing.data").toDF("CRIM","ZN","INDUS","CHAS","NOX","RM","AGE","DIS","RAD","TAX","PTRATIO","B","LSTAT","MEDV")

scala> df.printSchemaroot |-- CRIM: double (nullable = true)
 |-- ZN: double (nullable = true)
 |-- INDUS: double (nullable = true)
 |-- CHAS: integer (nullable = true)
 |-- NOX: double (nullable = true)
 |-- RM: double (nullable = true)
 |-- AGE: double (nullable = true)
 |-- DIS: double (nullable = true)
 |-- RAD: integer (nullable = true)
 |-- TAX: double (nullable = true)
 |-- PTRATIO: double (nullable = true)
 |-- B: double (nullable = true)
 |-- LSTAT: double (nullable = true)
 |-- MEDV: double (nullable = true)
 
df.show
+-------+----+-----+----+-----+-----+-----+------+---+-----+-------+------+-----+----+
|   CRIM|  ZN|INDUS|CHAS|  NOX|   RM|  AGE|   DIS|RAD|  TAX|PTRATIO|     B|LSTAT|MEDV|
+-------+----+-----+----+-----+-----+-----+------+---+-----+-------+------+-----+----+
|0.00632|18.0| 2.31|   0|0.538|6.575| 65.2|  4.09|  1|296.0|   15.3| 396.9| 4.98|24.0|
|0.02731| 0.0| 7.07|   0|0.469|6.421| 78.9|4.9671|  2|242.0|   17.8| 396.9| 9.14|21.6|
|0.02729| 0.0| 7.07|   0|0.469|7.185| 61.1|4.9671|  2|242.0|   17.8|392.83| 4.03|34.7|
|0.03237| 0.0| 2.18|   0|0.458|6.998| 45.8|6.0622|  3|222.0|   18.7|394.63| 2.94|33.4|
|0.06905| 0.0| 2.18|   0|0.458|7.147| 54.2|6.0622|  3|222.0|   18.7| 396.9| 5.33|36.2|
|0.02985| 0.0| 2.18|   0|0.458| 6.43| 58.7|6.0622|  3|222.0|   18.7|394.12| 5.21|28.7|
|0.08829|12.5| 7.87|   0|0.524|6.012| 66.6|5.5605|  5|311.0|   15.2| 395.6|12.43|22.9|
|0.14455|12.5| 7.87|   0|0.524|6.172| 96.1|5.9505|  5|311.0|   15.2| 396.9|19.15|27.1|
|0.21124|12.5| 7.87|   0|0.524|5.631|100.0|6.0821|  5|311.0|   15.2|386.63|29.93|16.5|
|0.17004|12.5| 7.87|   0|0.524|6.004| 85.9|6.5921|  5|311.0|   15.2|386.71| 17.1|18.9|
|0.22489|12.5| 7.87|   0|0.524|6.377| 94.3|6.3467|  5|311.0|   15.2|392.52|20.45|15.0|
|0.11747|12.5| 7.87|   0|0.524|6.009| 82.9|6.2267|  5|311.0|   15.2| 396.9|13.27|18.9|
|0.09378|12.5| 7.87|   0|0.524|5.889| 39.0|5.4509|  5|311.0|   15.2| 390.5|15.71|21.7|
|0.62976| 0.0| 8.14|   0|0.538|5.949| 61.8|4.7075|  4|307.0|   21.0| 396.9| 8.26|20.4|
|0.63796| 0.0| 8.14|   0|0.538|6.096| 84.5|4.4619|  4|307.0|   21.0|380.02|10.26|18.2|
|0.62739| 0.0| 8.14|   0|0.538|5.834| 56.5|4.4986|  4|307.0|   21.0|395.62| 8.47|19.9|
|1.05393| 0.0| 8.14|   0|0.538|5.935| 29.3|4.4986|  4|307.0|   21.0|386.85| 6.58|23.1|
| 0.7842| 0.0| 8.14|   0|0.538| 5.99| 81.7|4.2579|  4|307.0|   21.0|386.75|14.67|17.5|
|0.80271| 0.0| 8.14|   0|0.538|5.456| 36.6|3.7965|  4|307.0|   21.0|288.99|11.69|20.2|
| 0.7258| 0.0| 8.14|   0|0.538|5.727| 69.5|3.7965|  4|307.0|   21.0|390.95|11.28|18.2|
+-------+----+-----+----+-----+-----+-----+------+---+-----+-------+------+-----+----+
only showing top 20 rows

df.describe().show
+-------+------------------+------------------+------------------+------------------+-------------------+------------------+------------------+-----------------+-----------------+------------------+------------------+------------------+------------------+------------------+
|summary|              CRIM|                ZN|             INDUS|              CHAS|                NOX|                RM|               AGE|              DIS|              RAD|               TAX|           PTRATIO|                 B|             LSTAT|              MEDV|
+-------+------------------+------------------+------------------+------------------+-------------------+------------------+------------------+-----------------+-----------------+------------------+------------------+------------------+------------------+------------------+
|  count|               506|               506|               506|               506|                506|               506|               506|              506|              506|               506|               506|               506|               506|               506|
|   mean|3.6135235573122535|11.363636363636363|11.136778656126504|0.0691699604743083| 0.5546950592885372| 6.284634387351787| 68.57490118577078|3.795042687747034|9.549407114624506| 408.2371541501976|18.455533596837967|356.67403162055257|12.653063241106723|22.532806324110698|
| stddev| 8.601545105332491| 23.32245299451514| 6.860352940897589|0.2539940413404101|0.11587767566755584|0.7026171434153232|28.148861406903595| 2.10571012662761|8.707259384239366|168.53711605495903|2.1649455237144455| 91.29486438415782| 7.141061511348571| 9.197104087379815|
|    min|           0.00632|               0.0|              0.46|                 0|              0.385|             3.561|               2.9|           1.1296|                1|             187.0|              12.6|              0.32|              1.73|               5.0|
|    max|           88.9762|             100.0|             27.74|                 1|              0.871|              8.78|             100.0|          12.1265|               24|             711.0|              22.0|             396.9|             37.97|              50.0|
+-------+------------------+------------------+------------------+------------------+-------------------+------------------+------------------+-----------------+-----------------+------------------+------------------+------------------+------------------+------------------+

// Examine CRIM distribution

df.select(skewness('CRIM),kurtosis('CRIM)).show
+------------------+------------------+
|    skewness(CRIM)|    kurtosis(CRIM)|
+------------------+------------------+
|5.2076523878597145|36.752786261422735|
+------------------+------------------+

df.select('CRIM).rdd.map( row => row.getDouble(0)).histogram(10)
res6: (Array[Double], Array[Long]) = (Array(0.00632, 8.903308, 17.800296, 26.697284, 35.594272000000004, 44.491260000000004, 53.388248000000004, 62.285236000000005, 71.182224, 80.079212, 88.9762),
                                      Array(439, 44, 14, 1, 3, 2, 0, 1, 1, 1))

df.where('CRIM < 27.0).select('CRIM).rdd.map( row => row.getDouble(0)).histogram(10)
res8: (Array[Double], Array[Long]) = (Array(0.00632, 2.5997480000000004, 5.193176, 7.786604, 10.380032000000002, 12.973460000000001, 15.566888, 18.160315999999998, 20.753744, 23.347172, 25.9406),
                                      Array(368, 33, 27, 26, 11, 14, 6, 5, 2, 5))

df.where('CRIM < 27.0).select(log('CRIM)).rdd.map( row => row.getDouble(0)).histogram(10)
res9: (Array[Double], Array[Long]) = (Array(-5.064036070823371, -4.232051532848884, -3.4000669948743987, -2.568082456899912, -1.736097918925426, -0.9041133809509398, -0.07212884297645328, 0.7598556949980324, 1.591840232972519, 2.4238247709470047, 3.2558093089214903),
                                      Array(9, 26, 84, 101, 66, 43, 28, 43, 59, 38))

df.where('CRIM < 27.0).select(skewness(log('CRIM)),kurtosis(log('CRIM))).show
+-------------------+-------------------+
|skewness(LOG(CRIM))|kurtosis(LOG(CRIM))|
+-------------------+-------------------+
| 0.3720530068020045|-1.0905622482169177|
+-------------------+-------------------+


// Examine ZN distribution

df.select(skewness('ZN),kurtosis('ZN)).show
+-----------------+------------------+
|     skewness(ZN)|      kurtosis(ZN)|
+-----------------+------------------+
|2.219063057148425|3.9799487739913753|
+-----------------+------------------+

df.select('ZN).rdd.map( row => row.getDouble(0)).histogram(10)
res24: (Array[Double], Array[Long]) = (Array(0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0),
                                       Array(372, 12, 48, 16, 13, 6, 4, 6, 19, 10))

// Examine DIS distribution

df.select(skewness('DIS),kurtosis('DIS)).show
+------------------+-----------------+
|     skewness(DIS)|    kurtosis(DIS)|
+------------------+-----------------+
|1.0087787565152246|0.471298571610995|
+------------------+-----------------+

df.select('DIS).rdd.map( row => row.getDouble(0)).histogram(10)
res27: (Array[Double], Array[Long]) = (Array(1.1296, 2.2292899999999998, 3.32898, 4.42867, 5.52836, 6.62805, 7.727740000000001, 8.82743, 9.92712, 11.02681, 12.1265),
                                       Array(150, 111, 81, 61, 46, 26, 19, 7, 4, 1))

df.select(log('DIS)).rdd.map( row => row.getDouble(0)).histogram(10)
res28: (Array[Double], Array[Long]) = (Array(0.12186358775684052, 0.3592165430323701, 0.5965694983078996, 0.8339224535834292, 1.0712754088589589, 1.3086283641344885, 1.545981319410018, 1.7833342746855474, 2.020687229961077, 2.2580401852366068, 2.495393140512136),
                                       Array(22, 56, 81, 79, 55, 65, 57, 58, 28, 5))

df.select(skewness(log('DIS)),kurtosis(log('DIS))).show
+-------------------+-------------------+
| skewness(LOG(DIS))| kurtosis(LOG(DIS))|
+-------------------+-------------------+
|0.15227700116310425|-0.9883246496161782|
+-------------------+-------------------+


val df1 = df.where('CRIM < 27.0).
             withColumn("CRIM_log", log('CRIM)).
             withColumn("DIS_log", log('DIS))			 

val listcols = df1.columns.diff(Array("CRIM","DIS","MEDV")) ++ Array("MEDV")
listcols: Array[String] = Array(ZN, INDUS, CHAS, NOX, RM, AGE, RAD, TAX, PTRATIO, B, LSTAT, CRIM_log, DIS_log, MEDV)

import org.apache.spark.ml.feature.RFormula
val rf = new RFormula().setFormula("MEDV ~ " + listcols.mkString(" + "))

val df2 = rf.fit(df1).transform(df1)

import org.apache.spark.sql.Row
import org.apache.spark.ml.linalg.Matrix
import org.apache.spark.ml.stat.Correlation

val corr = Correlation.corr(df2, "features", "pearson").head match {
   case Row(coeff: Matrix) => coeff
 }
corr: org.apache.spark.ml.linalg.Matrix =
1.0                   -0.5309750733510802   ... (14 total)
-0.5309750733510802   1.0                   ...
-0.04523221179704139  0.06864376099084812   ...
-0.5140201553119926   0.7601413760080565    ...
0.3095210277603084    -0.38509038683474683  ...
-0.5673787227880177   0.638953685967712     ...
-0.3056534734212012   0.5847146787131079    ...
-0.30830615349915136  0.7144854884498862    ...
-0.38767614916775683  0.374110382561767     ...
0.1707193497974487    -0.348973389288489    ...
-0.4133549945957624   0.6010592164637679    ...
-0.5218456486606541   0.7293878231203326    ...
0.5900253214170553    -0.756239758617288    ...
0.3557435249880428    -0.4714570392007358   ...

corr.toDense.rowIter.foreach( x => {
  val size = x.size
  for ( i <- Range(0,size)) { 
    val elem = x(i)
    print(f"$elem%.3f\t") 
  }
  println
})
                                                                                                      // MEDV
1.000   -0.531  -0.045  -0.514  0.310   -0.567  -0.306  -0.308  -0.388  0.171   -0.413  -0.522  0.590   0.356   // ZN
-0.531  1.000   0.069   0.760   -0.385  0.639   0.585   0.714   0.374   -0.349  0.601   0.729   -0.756  -0.471  // INDUS
-0.045  0.069   1.000   0.097   0.088   0.092   0.001   -0.029  -0.118  0.043   -0.049  0.041   -0.095  0.172   // CHAS
-0.514  0.760   0.097   1.000   -0.294  0.729   0.603   0.662   0.178   -0.379  0.585   0.792   -0.830  -0.413  // NOX
0.310   -0.385  0.088   -0.294  1.000   -0.229  -0.192  -0.278  -0.350  0.105   -0.606  -0.292  0.244   0.696   // RM
-0.567  0.639   0.092   0.729   -0.229  1.000   0.443   0.495   0.251   -0.262  0.600   0.655   -0.775  -0.363  // AGE
-0.306  0.585   0.001   0.603   -0.192  0.443   1.000   0.906   0.455   -0.429  0.473   0.846   -0.542  -0.355  // RAD
-0.308  0.714   -0.029  0.662   -0.278  0.495   0.906   1.000   0.451   -0.428  0.532   0.821   -0.604  -0.448  // TAX
-0.388  0.374   -0.118  0.178   -0.350  0.251   0.455   0.451   1.000   -0.163  0.367   0.376   -0.223  -0.500  // PTRATIO
0.171   -0.349  0.043   -0.379  0.105   -0.262  -0.429  -0.428  -0.163  1.000   -0.367  -0.459  0.310   0.321   // B
-0.413  0.601   -0.049  0.585   -0.606  0.600   0.473   0.532   0.367   -0.367  1.000   0.618   -0.555  -0.732  // LSTAT
-0.522  0.729   0.041   0.792   -0.292  0.655   0.846   0.821   0.376   -0.459  0.618   1.000   -0.735  -0.425  // CRIM_log
0.590   -0.756  -0.095  -0.830  0.244   -0.775  -0.542  -0.604  -0.223  0.310   -0.555  -0.735  1.000   0.268   // DIS_log
0.356   -0.471  0.172   -0.413  0.696   -0.363  -0.355  -0.448  -0.500  0.321   -0.732  -0.425  0.268   1.000

// RAD x TAX = 0.906 can be considered multicolinear
// NOX x DIS_log = -0.830 can be considered inversed multicolinear
// RAD x CRIM_log = 0.846 can be considered multicolinear
// TAX x CRIM_log = 0.821 can be considered multicolinear
// INDUS x NOX = 0.760 can be considered multicolinear
// INDUS x TAX = 0.714 can be considered multicolinear
// INDUS x CRIM_log = 0.729 can be considered multicolinear
// INDUS x DIS_log = -0.756 can be considered inversed multicolinear
// NOX x AGE = 0.729 can be considered multicolinear
// NOX x CRIM_log = 0.792 can be considered multicolinear
// AGE x DIS_log = -0.775 can be considered inversed multicolinear

